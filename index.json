[{"categories":null,"content":"1.文件系统命令 pwd–显示当前工作目录的绝对路径 cd–更改工作目录路径 mkdir–创建目录 ls–列出目录和文件信息【 -l 详细信息展示 -a显示全部文件（包括隐藏）-d查看目录属性 -h与-l一起以易读格式输出 -1每一项单独显示在一行上】 touch–创建空文件、更改文件时间 cp–复制文件或目录 -a在复制目录时使用 mv–文件或目录改名、移动文件和目录 rm–通常与-rf一起使用删除文件或目录 通配符– ?——匹配任意一个字符 *——匹配任意多个字符 []——相当于或 -——代表一个范围 find–查找文件或目录【-name 匹配文件名 -type 匹配文件类型（f为文件d为目录）-size 匹配文件大小（+50k查找＞50k文件，-50k查找\u003c50k文件）】 cat—显示文件内容、连接文件内容 head–显示文件前若干行 【用法：head -n 行数值 [文件]】 tail–显示文件末尾数据 【用法：tail -n 行数值 [文件]】 grep–搜索与字符串匹配的行【-i 忽略大小写 -n 显示行号 -r 递归搜索子目录 -v 反找不符查找条件的】 tar–打包和解包命令【-c 产生.tar打包文件 -x 解包】 tar -czvf—打包文件名.tar.gz 源文件或目录（-xzvf 解包） tar -cjvf—打包文件名.tar.bz2 源文件或目录（-xjvf 解包） tar -cJvf—打包文件名.tar.xz 源文件或目录（-xJvf 解包） 两种链接方式– ln- s 产生符号链接，其相当于快捷方式。原文件被删除时，链接文件将失效。 ln 产生硬链接。硬链接文件对，删除哪个都不影响对方。 ","date":"2022-12-12","objectID":"/linux%E7%AC%94%E8%AE%B0/:1:0","tags":null,"title":"Linux笔记","uri":"/linux%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"2.vim命令 i 插入 Esc 退出插入 :w 保存 :w /root/newfile另存为其他文件 :q 退出 :q! 强制退出（不保存文件） :wq 保存并退出 :e ~/install.log打开新的文件进行编辑 h,j,k,l 左，下、上、右 w 跳到下一个单词 e 跳到下一个单词尾部 b 跳到上一个单词（标点符号不包含在单词内） B 跳到上一个单词（标点符号也包含在单词内） Ctrl+F 向下整页 Ctrl+B 向上整页 0 跳转至行首 $ 跳转至行尾 gg 跳转到文件的首行 G 跳转到文件的末尾行 #gg 跳转到文件中的第#行 :set nu 在编辑器中显示行号 :set nonu 取消行号 x 删除光标处的单个字符 dd 删除当前光标所在行 #dd 删除从光标处开始的#行内容 r 替换单个字符 R 替换多个字符 yy 复制当前光标所在行内容 #yy 复制从光标处开始的#行内容 p 粘贴内容到光标位置处的下一行 P 粘贴到光标位置处之前 /word 查找字符串\";word\"; n 定位下一个被查找的字符串 N 定位上一个被查找的字符串 u 撤销操作 :s/old/new 将当前行查找到的第一个字符串“old”替换成“new” :s/old/new/g 将当前行查找到的所有字符串“old”替换成“new” :#,#s/old/new/g 在行号\";#,#\";范围内替换所有的字符串“old”为“new” :%s/old/new/g 在整个文件范围内替换所有的字符串“old”为“new” :s/old/new/c 对每个替换动作作提示 ","date":"2022-12-12","objectID":"/linux%E7%AC%94%E8%AE%B0/:2:0","tags":null,"title":"Linux笔记","uri":"/linux%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"3.重定向和管道 标准输入文件，代码为0，使用\u003c或\u003c\u003c 标准输出文件，代码为1，使用\u003e或\u003e\u003e 标准错误输出文件，代码为2，使用2\u003e或2\u003e\u003e 重定向标准输出和标准错误，使用\u0026\u003e或\u0026\u003e\u003e / \u003e\u003elog.txt 2\u003e\u00261 |–管道可以将第一个命令输出作为第二个命令输入 wc–可以显示行数、单词数和字符数【-l 仅显示多少行 -w 仅显示多少字 -m 多少字符】 ls -l | wc -l 搭配可以统计目录下文件数目 xargs–将输入中的换行、多个连续空格替换成单个空格【xargs wc -l 统计文件行数】 -I用来指定替代字符串，后续出现替代字符串的地方都用标准输入的内容替代。对于标准输入的每一行，都会执行一次命令。需要注意的是，当xargs传送给一个命令的参数过长时，会自动将参数截断，分成多条命令执行。 例1：查找文件，显示每个文件加上.bak find -name *.conf | xargs -I {} echo {}.bak 例2：查找文件，并复制到指定目录 find -name *.conf | xargs -I {} cp {} home/euler ","date":"2022-12-12","objectID":"/linux%E7%AC%94%E8%AE%B0/:3:0","tags":null,"title":"Linux笔记","uri":"/linux%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"4.用户权限管理 su–在任意用户之间进行切换 以下命令皆需要使用root用户 useradd–添加用户 passwd–设置用户密码 userdel–删除用户（-r 同时删除用户及主目录） groupadd–添加组 groupdel–删除组 usermod–将用户添加到一个组 （-G选项，用于指定要将用户添加到哪个组，最好加上-a选项，表示添加，不会覆盖原有组） 文件权限： 可读（r）：允许查看文件内容、显示目录列表 可写（w）：允许修改文件内容，允许在目录中新建、移动、删除文件或子目录 可执行（x）：允许运行程序、切换目录 chmod 设置权限【-R选项可以递归设置目录的权限】 字符法（user，group，other，all） 例：chmod o+r cat.txt——对其他用户设置可读权限 数字法（r-4，w-2，x-1） 例：chmod 444 cat.txt——对文件所有者、文件所属组、其他用户权限全只设置可读 chown 更改文件和目录的所有者和所属组【-R选项可以递归设置目录的权限】 用法：chown [-R] [user] [:group] 文件或目录 ","date":"2022-12-12","objectID":"/linux%E7%AC%94%E8%AE%B0/:4:0","tags":null,"title":"Linux笔记","uri":"/linux%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"5.进程管理及其他命令 ps aux查看所有进程信息 top命令提供了实时的对系统处理器的状态监视 kill用于终止一个进程（-9 选项用于强制终止） crontab可以按照预先设置的时间周期执行计划任务 *——表示范围内任意时间 ,——表示间隔的多个不连续时间 -——表示一个连续的时间范围 /——指定间隔的时间频率 df -h用于查看磁盘使用情况 du -h显示指定的目录或文件所占用的磁盘空间（-s只显示总计结果） alias可以对命令设置别名（例如将reboot命令设置为输入r即可重启） export设置或显示环境变量 time命令用来计算命令执行的时间，-p 选项不显示时间单位。后跟的重定向、管道符号，默认都是用于要计时的命令，如果需要用于time命令，需要对time命令进行分组。默认将结果打印到标准错误。 ","date":"2022-12-12","objectID":"/linux%E7%AC%94%E8%AE%B0/:5:0","tags":null,"title":"Linux笔记","uri":"/linux%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"6.shell脚本编程 #–注释 $–变量符 ‘一单引号引起来的内容，全部普通字符 “一双引号引起来的内容，可以包括特殊字符 \\—转义符，echo命令需要加-e才会解析 `—倒引号，用于执行命令，并返回命令输出 $? 上一个命令的返回值（执行成功返回0，执行失败返回非0） $n 第n个参数 数组创建：array_name=(value1 value2…value) 数组读取：${array_name[index]} 数组长度：${#array_name[*]} 分支控制语句：if / case 语句 循环控制语句：for / while / until 语句 条件测试 [ 条件表达式 ] -eq（equal）＝ 等于 -ne（not equal）≠ 不等于 -lt（less than）＜小于 -le（less than or equal）≤ 小于或等于 -gt（greater than）＞大于 -ge（greater than or equal）≥ 大于或等于 逻辑运算符： -a 逻辑与and -o 逻辑或or Shell命令顺序执行： \u0026\u0026 逻辑与 前面的命令执行失败，则不执行后面的命令 || 逻辑或 前面的命令执行成功，则不执行后面的命令 ","date":"2022-12-12","objectID":"/linux%E7%AC%94%E8%AE%B0/:6:0","tags":null,"title":"Linux笔记","uri":"/linux%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"7.sed和awk sed: 替换的一般格式：s/source/target/flag 【flag：g-表示行内全面替换 p-表示打印行 i-表示忽略大小写】 通配符：\\ ( \\ )用来分组。\\1、\\2、\\3分别表示第1、2、3个分组 sed行命令格式：sed [选项] ‘[范围] [命令]’ 文件名 【-n 只显示处理后的结果 -i 直接修改文件的内容】 【范围：1,2 2,$(最后一行) /^Hello/,+1(^表示行首，+1表示下一行)】 p对匹配内容进行打印 d删除匹配内容 a新增一行 i插入一行（当前行之前） c取代 awk: awk列命令格式：awk [选项] ‘[匹配] {动作}’ $0表示整行,$1、$2分别表示第一、二个字段 -F 指定分隔符（默认空格 / tab） 动作中布尔表达式语法与C语言类似（例’$2\u003c60 {print $0}’） 特殊模式BEGIN用于匹配第一个输入文件的第一行之前的位置 内置变量NR表示当前行号 END则用于匹配处理过的最后一个文件的最后一行之后的位置 ","date":"2022-12-12","objectID":"/linux%E7%AC%94%E8%AE%B0/:7:0","tags":null,"title":"Linux笔记","uri":"/linux%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"8.系统管理 htop–比top更好用的进程查看器 Redis–key-value的内存数据库 ncdu–磁盘分析工具 以下为不同系统运行的命令，且需要sudo 管理软件 搜索软件（dnf yum apt） search htop 安装软件（dnf yum apt）install htop 卸载软件（dnf yum）remove htop / apt purge htop 更新软件（dnf yum apt）upgrade 查找命令属于哪个包（dnf yum）provides lsb_release / apt-file search lsb_release 防火墙软件（firewalld / ufw） 查看防火墙状态 firewall-cmd --list-all / ufw status 开放/取消服务 openeuler—firewall-cmd --add(/remove)-service=http --permanent + firewall-cmd --reload Ubuntu—ufw allow http / ufw delete allow http 开放/取消端口 openeuler—firewall-cmd --add(/remove)-port=80/tcp --permanent + firewall-cmd --reload Ubuntu—ufw allow 80 / ufw delete allow 80 服务管理 启动服务 systemctl start nginx 查看服务状态 systemctl status nginx 重启服务 systemctl restart nginx 停止服务 systemctl stop nginx 查看是否开机启动 systemctl is-enabled nginx 设置开机启动 systemctl enable nginx 取消开机启动 systemctl disable nginx ","date":"2022-12-12","objectID":"/linux%E7%AC%94%E8%AE%B0/:8:0","tags":null,"title":"Linux笔记","uri":"/linux%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"9.磁盘管理 磁盘分区 lsblk -f 查看磁盘信息 磁盘分区表类型MBR/GPT 需要使用root权限对磁盘进行分区，如新添加了一块磁盘，使用lsblk查看设备名称为/dev/sdb sudo parted /dev/sdb 创建新的分区表：mklabel gpt 删除分区：rm 查看分区表：print 创建分区1：mkpart part1 0% 10G 创建分区2：mkpart part2 10G 100% 创建并挂载文件系统： mkfs -t ext4 /dev/sdb mkdir /mnt/data mount /dev/sdb /mnt/data 卸载文件系统：umount /mnt/data 自动挂载文件系统： 首先执行blkid命令查看UUID，后编辑/etc/fstab，添加一行 UUID=uuidnumber(查询到的uuid) mntpath(文件系统的挂载目录) fstype(文件系统的文件格式) defaults 0 0 非交互式磁盘分区：sudo parted --script /dev/sdb mklabel gpt LVM(逻辑卷管理) 管理物理卷（PV，Physical Volumes）： 创建：pvcreate /dev/sdb 查看：pvs/pvdisplay 删除：pvremove /dev/sdb 管理卷组（VG，Volume Group）： 创建：vgcreate vg1 /dev/sdb 扩展：vgextend vg1 /dev/sdc 收缩：vgreduce vg1 /dev/sdb 删除：vgremove vg1 管理逻辑卷（LV，Logical Volumes）： 创建：lvcreate -L(指定逻辑卷大小) 10G -n(指定逻辑卷名称) lv1 vg1(卷组名称作为参数) 查看：lvs/lvdisplay 扩展：lvextend --resizefs(同时调整文件系统大小) -L(指定逻辑卷大小) +10G /dev/vg1/lv1 收缩：lvreduce --resizefs(同时调整文件系统大小) -L(指定逻辑卷大小) -10G /dev/vg1/lv1 删除：lvremove /dev/vg1/lv1 RAID(独立磁盘冗余阵列) RAID 0—数据被分成几部分，分别同时写入成员磁盘中，提高IO性能，但不提供冗余 RAID 1—通过将相同数据写入阵列的每个磁盘来提供冗余，简单且数据高度可用，但是成本相对高 RAID 5—RAID 0和RAID 1的折中，如果某磁盘故障，可根据其他磁盘上的校验数据来重建损坏数据 创建RAID 1阵列 创建：sudo mdadm --create /dev/md0 --level=1 --raid-devices=2 /dev/sdd /dev/sde 检查：sudo mdadm --detail /dev/md0 / cat /proc/mdstat 使用RAID建立文件系统：sudo mkfs -t ext4 /dev/md0 模拟磁盘故障：sudo mdadm /dev/md0 --fail /dev/sdd 移除故障磁盘：sudo mdadm /dev/md0 --remove /dev/sdd 添加新磁盘：sudo mdadm /dev/md0 --add /dev/sdf 创建RAID 5阵列 创建：sudo mdadm --create /dev/md1 --level=5 --raid-devices=3 --spare-device=1 /dev/sdf /dev/sdg /dev/sdh /dev/sdi 磁盘配额 配额限制值分为两种：硬性限制值、软性限制值。硬性限制值：绝对不允许超过的值，软性限制值：在宽限期内可以暂时超过的一个限制值；超过宽限期不可超过这个限制值。 EXT4文件系统磁盘配额 创建文件系统时启用配额：sudo mkfs.ext4 -O(创建时添加指定的特性) quota /dev/vg1/lv1 启用配额强制： sudo mkdir /mnt/data3 +sudo mount /dev/vg1/lv1 /mnt/data3+ sudo quotaon /mnt/data3 为用户分配配额：sudo edquota testuser 为软限制设置宽限期：sudo edquota -t 关闭文件系统配额：sudo quotaoff ","date":"2022-12-12","objectID":"/linux%E7%AC%94%E8%AE%B0/:9:0","tags":null,"title":"Linux笔记","uri":"/linux%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"1.连接git 如图所示，我用的是国内的gitee仓库。 如图所示，创建完仓库后在终端上输入以上命令即可。在创建完仓库后会给代码提示。 ![git log](/git log.PNG) 如图，上传后的git日志。 ","date":"2022-12-12","objectID":"/%E5%A4%A7%E4%BD%9C%E4%B8%9A%E6%AD%A5%E9%AA%A4/:1:0","tags":null,"title":"大作业步骤","uri":"/%E5%A4%A7%E4%BD%9C%E4%B8%9A%E6%AD%A5%E9%AA%A4/"},{"categories":null,"content":"2.socket 客户端代码： #include \u003ciostream\u003e #include \u003cunistd.h\u003e #include \u003csys/socket.h\u003e #include \u003carpa/inet.h\u003e #include \u003cstring.h\u003e #include \u003cerrno.h\u003e using namespace std; int main(int argc,char** argv) { int clitfd; //文件描述符 struct sockaddr_in serv_addr; //目的服务端地址结构体 memset(\u0026serv_addr,0,sizeof(serv_addr)); if(argc!=3) { cout\u003c\u003c\"Input error! Usage should be : \"\u003c\u003cargv[0]\u003c\u003c\" xxx.xxx.xxx.xxx(ip) 1234(port)\"\u003c\u003cendl; return 0; } if((clitfd = socket(AF_INET,SOCK_STREAM,0)) == -1) //创建套接字 { cout\u003c\u003c\"creat socket failed : \"\u003c\u003cstrerror(errno)\u003c\u003cendl; return 0; } //将目的服务端的地址信息赋值给地址结构体 serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(atoi(argv[2])); serv_addr.sin_addr.s_addr = inet_addr(argv[1]); cout\u003c\u003c\"try to connect ... \"\u003c\u003cendl; //通过套接字发起连接请求，成功后clitfd套接字则表示此次成功的连接 if( connect(clitfd,(struct sockaddr*)\u0026 serv_addr,sizeof(serv_addr)) == -1) { cout\u003c\u003c\"connet failed : \"\u003c\u003cstrerror(errno)\u003c\u003cendl; return 0; } cout\u003c\u003c\"connect success !\"\u003c\u003cendl; while(1) { char sdbuf[1024]; char rvbuf[1024]; int rdlen,sdlen,i=0; cout\u003c\u003c\"(Client)send : \"; while((sdbuf[i] = getchar()) != '\\n')i++; if(i==0)continue; //防止客户端只发一个换行符，此时i=0，write不发送数据，服务端就不回回发数据，然后客户端就一直阻塞在read处。因此如果i=0，则直接重新输入 sdlen = write(clitfd,sdbuf,i); //向套接字中写入数据发送 //可能会出现发送端把长度为sdlen的字符串分为多次发送，调用一次read就很有可能不能读取完全，就有以下两种方式进行读取： /*1. write了多少字节就读取多少字节长的字符串*/ rdlen=0; while(rdlen\u003csdlen)//防止发送端将数据分开发送 { int rdcnt = read(clitfd,\u0026rvbuf[rdlen],sizeof(rvbuf)); if(rdcnt == -1) { perror(NULL); continue; } rdlen+=rdcnt; } if(rdlen) { rvbuf[rdlen]='\\0'; cout\u003c\u003c\"(Client)recv : \"\u003c\u003crvbuf\u003c\u003cendl; } else { cout\u003c\u003c\"Server has closed ! \"\u003c\u003cendl; cout\u003c\u003c\"Client will close...\"\u003c\u003cendl; break; } /*2. 用recv函数中的MSG_WAITALL参数，读到指定长度的数据才返回*/ /*if(rdlen = recv(clitfd,\u0026rvbuf[rdlen],sdlen,MSG_WAITALL)) { rvbuf[rdlen]='\\0'; cout\u003c\u003c\"(Client)recv : \"\u003c\u003crvbuf\u003c\u003cendl; } else { cout\u003c\u003c\"Server has closed ! \"\u003c\u003cendl; cout\u003c\u003c\"Client will close...\"\u003c\u003cendl; break; }*/ } close(clitfd); } 服务端代码： #include \u003ciostream\u003e #include \u003cunistd.h\u003e #include \u003csys/socket.h\u003e #include \u003carpa/inet.h\u003e #include \u003cstring.h\u003e #include \u003cerrno.h\u003e #define SERV_PORT 8888 //服务器端口 #define SERV_IP \"127.1.1.1\" //服务器ip using namespace std; int main(int argc,char** argv) { int servfd,clitfd; //创建两个文件描述符，servfd为监听套接字，clitfd用于数据传输 struct sockaddr_in serv_addr,clit_addr; //创建地址结构体，分别用来存放服务端和客户端的地址信息 memset(\u0026serv_addr,0,sizeof(serv_addr)); //初始化 memset(\u0026clit_addr,0,sizeof(clit_addr)); //初始化 if((servfd = socket(AF_INET,SOCK_STREAM,0)) == -1) //创建套接字 { cout\u003c\u003c\"creat socket failed : \"\u003c\u003cstrerror(errno)\u003c\u003cendl;//如果出错则打印错误 return 0; } //给服务端的地址结构体赋值 serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(SERV_PORT); //将主机上的小端字节序转换为网络传输的大端字节序（如果主机本身就是大端字节序就不用转换了） serv_addr.sin_addr.s_addr = inet_addr(SERV_IP); //将字符串形式的ip地址转换为点分十进制格式的ip地址 //绑定地址信息到监听套接字上，第二个参数强转是因为形参类型为sockaddr ，而实参类型是sockaddr_in 型的 if(bind(servfd,(sockaddr *)\u0026 serv_addr,sizeof(serv_addr)) == -1) { cout\u003c\u003c\"bind failed : \"\u003c\u003cstrerror(errno)\u003c\u003cendl; return 0; } //将servfd套接字置为监听状态 if(listen(servfd,1024) == -1) { cout\u003c\u003c\"listen failed : \"\u003c\u003cstrerror(errno)\u003c\u003cendl; return 0; } cout\u003c\u003c\"Init Success ! \"\u003c\u003cendl; cout\u003c\u003c\"ip : \"\u003c\u003cinet_ntoa(serv_addr.sin_addr)\u003c\u003c\" port : \"\u003c\u003cntohs(serv_addr.sin_port)\u003c\u003cendl; cout\u003c\u003c\"Waiting for connecting ... \"\u003c\u003cendl; socklen_t clit_size = 0; //用于accept函数中保存客户端的地址结构体大小 //accept成功后，clitfd则指向了这条服务端与客户端成功连接的”通路“ if((clitfd = accept(servfd,(sockaddr *)\u0026 clit_addr,\u0026clit_size)) == -1) { cout\u003c\u003c\"accept failed : \"\u003c\u003cstrerror(errno)\u003c\u003cendl; return 0; } cout\u003c\u003c\"Client access : \"\u003c\u003cinet_ntoa(clit_addr.sin_addr)\u003c\u003c\" \"\u003c\u003cntohs(clit_addr.sin_port)\u003c\u003cendl; char buf[1024]; //用于读写数据 while(1) { int rdstate; if((rdstate = read(clitfd,buf,sizeof(buf))) \u003e 0 )//通过clitfd来读取数据，返回值为读取的长度 { int i=0; cout\u003c\u003c\"(Server)recv : \"; for(i=0;i\u003crdstate;i++) { cout\u003c\u003cbuf[i]; buf[i] = toupper(buf[i]); //转换为大写 } buf[i]='\\0'; cout\u003c\u003cendl; write(clitfd,buf,strlen(buf)); //发回客户端 } else if(rdstate == 0) //客户端退出 { cout\u003c\u003c\"client exit ! \"\u003c\u003cendl; return 0; } } close(servfd); //关闭套接字 close(clitfd); return 0; } 如图，新建一个socket文件夹，在里面vim一个客户端代码文件和一个服务端代码文件，用g++编译运行后即可实现通讯，实现效果如下图： ","date":"2022-12-12","objectID":"/%E5%A4%A7%E4%BD%9C%E4%B8%9A%E6%AD%A5%E9%AA%A4/:2:0","tags":null,"title":"大作业步骤","uri":"/%E5%A4%A7%E4%BD%9C%E4%B8%9A%E6%AD%A5%E9%AA%A4/"},{"categories":null,"content":"3.Hugo 首先是安装hugo，用的代码如下： wget https://github.com/gohugoio/hugo/releases/download/v0.80.0/hugo_0.80.0_Linux-64bit.deb 下载完后用以下代码安装： sudo dpkg -i hugo_0.80.0_Linux-64bit.deb 如图，验证hugo版本。 随后用hugo来生成博客，代码如下： hugo new site myblog ![new blog效果图](/new blog效果图.PNG) 随后在https://gohugo.io/网页下载主题： 下载完后放入博客文件夹的themes文件夹内，用hugo serve开启服务，即可在本地启动博客 ![开启hugo serve](/开启hugo serve.PNG) 用以下代码即可生成md文件： hugo new post/xxx.md 部署Web服务器，首先开启apache： 随后输入hugo生成public文件夹，将public文件夹整个复制到/var/www/html中，在网页中输入本机ip，即可看到本地部署的Web服务器上的Hugo网页： ","date":"2022-12-12","objectID":"/%E5%A4%A7%E4%BD%9C%E4%B8%9A%E6%AD%A5%E9%AA%A4/:3:0","tags":null,"title":"大作业步骤","uri":"/%E5%A4%A7%E4%BD%9C%E4%B8%9A%E6%AD%A5%E9%AA%A4/"}]